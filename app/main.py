import streamlit as st
import cv2
import numpy as np
from PIL import Image
import tempfile
import os
import time
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import pandas as pd
import logging
import io

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Import our modules
from models.diagnosis_engine import DiagnosisEngine
from utils.conversation_manager import ConversationManager
from utils.openai_client import OpenAIClient
from config.settings import settings

# Page configuration
st.set_page_config(
    page_title="üß† Mental Health Analyzer",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Enhanced CSS (removed problematic chat styles)
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        text-align: center;
        color: white;
    }
    
    .audio-container {
        border: 2px dashed #667eea;
        border-radius: 10px;
        padding: 2rem;
        margin: 1rem 0;
        text-align: center;
        background: #f8f9fa;
    }
    
    .mood-indicator {
        font-size: 2rem;
        text-align: center;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        border: 2px solid;
    }
    
    .analysis-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #667eea;
        margin: 1rem 0;
    }
    
    .primary-concern-highlight {
        background: linear-gradient(90deg, #ff9a9e 0%, #fecfef 100%);
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #ff6b6b;
        margin: 1rem 0;
        font-weight: bold;
    }
    
    .crisis-alert {
        background: #ffebee;
        border: 2px solid #f44336;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
        color: #d32f2f;
        font-weight: bold;
    }
    
    .language-badge {
        background: #e8f5e8;
        color: #2e7d32;
        padding: 0.25rem 0.5rem;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: bold;
    }
    
    .upload-section {
        border: 2px dashed #28a745;
        border-radius: 10px;
        padding: 1.5rem;
        margin: 1rem 0;
        text-align: center;
        background: #f8fff9;
    }
    
    .instruction-box {
        background: #e7f3ff;
        border: 1px solid #b3d9ff;
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    /* Custom chat styling for better appearance */
    .stChatMessage {
        border-radius: 15px;
        margin: 0.5rem 0;
    }
    
    .stChatMessage[data-testid="chat-message-assistant"] {
        background-color: #f0f2f6;
    }
    
    .stChatMessage[data-testid="chat-message-user"] {
        background-color: #e3f2fd;
    }
</style>
""", unsafe_allow_html=True)

def initialize_app():
    """Initialize application components"""
    try:
        if 'diagnosis_engine' not in st.session_state:
            with st.spinner("ü§ñ Loading AI models... This may take a few moments."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                status_text.text("Initializing text analysis models...")
                progress_bar.progress(25)
                
                status_text.text("Loading audio processing models...")
                progress_bar.progress(50)
                
                status_text.text("Setting up video analysis...")
                progress_bar.progress(75)
                
                st.session_state.diagnosis_engine = DiagnosisEngine(settings.openai_api_key)
                
                progress_bar.progress(100)
                status_text.text("All models loaded successfully! ‚úÖ")
                time.sleep(1)
                progress_bar.empty()
                status_text.empty()
        
        if 'conversation_manager' not in st.session_state:
            st.session_state.conversation_manager = ConversationManager()
        
        if 'openai_client' not in st.session_state:
            st.session_state.openai_client = OpenAIClient(settings.openai_api_key)
        
        if 'analysis_results' not in st.session_state:
            st.session_state.analysis_results = None
        
        if 'current_mood' not in st.session_state:
            st.session_state.current_mood = "Unknown"
        
        if 'selected_language' not in st.session_state:
            st.session_state.selected_language = 'en'
        
        return True
        
    except Exception as e:
        st.error(f"‚ùå Failed to initialize application: {str(e)}")
        st.info("Please check your API keys and internet connection.")
        return False

def display_sidebar():
    """Enhanced sidebar"""
    with st.sidebar:
        st.header("üåê Language Selection")
        
        language_options = [
            ("English", "en", "üá∫üá∏"),
            ("‡§π‡§ø‡§®‡•ç‡§¶‡•Ä (Hindi)", "hi", "üáÆüá≥")
        ]
        
        selected_lang = st.selectbox(
            "Choose your language:",
            options=language_options,
            format_func=lambda x: f"{x[2]} {x[0]}",
            index=0 if st.session_state.get('selected_language', 'en') == 'en' else 1
        )
        
        st.session_state.selected_language = selected_lang[1]
        
        if selected_lang[1] == 'hi':
            st.markdown('<span class="language-badge">‡§π‡§ø‡§®‡•ç‡§¶‡•Ä ‡§∏‡§Æ‡§∞‡•ç‡§•‡§® ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø</span>', unsafe_allow_html=True)
        
        st.divider()
        
        # Session statistics
        st.header("üìä Session Statistics")
        
        stats = st.session_state.conversation_manager.get_conversation_statistics()
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Total Sessions", stats['total_conversations'])
            st.metric("Messages", stats['total_messages'])
        with col2:
            if stats['most_common_mood'] != 'None':
                st.metric("Common Mood", stats['most_common_mood'])
            else:
                st.metric("Status", "New User")
        
        if st.session_state.analysis_results:
            st.subheader("üéØ Current Session")
            current_concern = st.session_state.analysis_results.get('summary', {}).get('primary_concern', 'None')
            current_risk = st.session_state.analysis_results.get('summary', {}).get('risk_level', 'minimal')
            
            st.write(f"**Primary Concern:** {current_concern}")
            st.write(f"**Risk Level:** {current_risk.title()}")
            st.write(f"**Current Mood:** {st.session_state.current_mood}")
        
        st.divider()
        
        # Session controls
        st.header("‚öôÔ∏è Session Controls")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üíæ Save Session"):
                st.session_state.conversation_manager.save_current_conversation()
                st.success("Session saved!")
                time.sleep(1)
                st.rerun()
        
        with col2:
            if st.button("üîÑ New Session"):
                st.session_state.conversation_manager.save_current_conversation()
                st.session_state.analysis_results = None
                st.success("New session started!")
                time.sleep(1)
                st.rerun()

def display_analysis_section():
    """Enhanced analysis section with working audio input"""
    language = st.session_state.get('selected_language', 'en')
    
    if language == 'hi':
        st.header("üéØ ‡§¨‡§π‡•Å‡§Ü‡§Ø‡§æ‡§Æ‡•Ä ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£")
        st.write("‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü, ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§î‡§∞ ‡§´‡•ã‡§ü‡•ã ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§Ö‡§™‡§®‡•Ä ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç")
    else:
        st.header("üéØ Multi-Modal Mental Health Analysis")
        st.write("Analyze your mental state through text, voice, and photo inputs")
    
    # Input tabs
    if language == 'hi':
        tab_labels = ["üí¨ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§á‡§®‡§™‡•Å‡§ü", "üé§ ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§Ö‡§™‡§≤‡•ã‡§°", "üìπ ‡§´‡•ã‡§ü‡•ã ‡§ï‡•à‡§™‡•ç‡§ö‡§∞"]
    else:
        tab_labels = ["üí¨ Text Input", "üé§ Audio Upload", "üìπ Photo Capture"]
    
    tab1, tab2, tab3 = st.tabs(tab_labels)
    
    # Initialize input variables
    text_input = None
    audio_file_path = None
    video_frame = None
    
    # Tab 1: Text Input
    with tab1:
        if language == 'hi':
            st.subheader("‡§Ö‡§™‡§®‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç")
            placeholder_text = "‡§Ü‡§™ ‡§ï‡•à‡§∏‡§æ ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç? ‡§Ü‡§™‡§ï‡•á ‡§Æ‡§® ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§¨‡§æ‡§§ ‡§π‡•à?\n\n‡§â‡§¶‡§æ‡§π‡§∞‡§£:\n'‡§Æ‡•Å‡§ù‡•á ‡§¨‡§π‡•Å‡§§ ‡§ö‡§ø‡§Ç‡§§‡§æ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à ‡§î‡§∞ ‡§∞‡§æ‡§§ ‡§Æ‡•á‡§Ç ‡§®‡•Ä‡§Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§§‡•Ä...'\n'‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§¨‡§π‡•Å‡§§ ‡§ñ‡•Å‡§∂ ‡§π‡•Ç‡§Å ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø...'\n'‡§Æ‡•Å‡§ù‡•á ‡§≤‡§ó‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§¨‡§π‡•Å‡§§ ‡§§‡§®‡§æ‡§µ ‡§Æ‡•á‡§Ç ‡§π‡•Ç‡§Å...'"
        else:
            placeholder_text = "How are you feeling? What's on your mind?\n\nExamples:\n'I've been feeling anxious lately and can't sleep well...'\n'I'm really excited about my new job...'\n'I feel overwhelmed with everything going on...'"
        
        text_input = st.text_area(
            "Your thoughts:" if language == 'en' else "‡§Ü‡§™‡§ï‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞:",
            height=150,
            placeholder=placeholder_text,
            help="Express your current thoughts, feelings, or concerns in detail." if language == 'en' else "‡§Ö‡§™‡§®‡•á ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§µ‡§ø‡§ö‡§æ‡§∞, ‡§≠‡§æ‡§µ‡§®‡§æ‡§è‡§Ç ‡§Ø‡§æ ‡§ö‡§ø‡§Ç‡§§‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§"
        )
        
        if text_input:
            word_count = len(text_input.split())
            st.caption(f"Word count: {word_count}" if language == 'en' else f"‡§∂‡§¨‡•ç‡§¶ ‡§ó‡§ø‡§®‡§§‡•Ä: {word_count}")
            
            # Auto-detect language
            if st.session_state.get('diagnosis_engine'):
                try:
                    detected_lang = st.session_state.diagnosis_engine.text_analyzer.detect_language(text_input)
                    if detected_lang == 'hi':
                        st.markdown('<span class="language-badge">‡§π‡§ø‡§®‡•ç‡§¶‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§™‡§π‡§ö‡§æ‡§®‡•Ä ‡§ó‡§à</span>', unsafe_allow_html=True)
                    else:
                        st.markdown('<span class="language-badge">English detected</span>', unsafe_allow_html=True)
                except:
                    pass
    
    # Tab 2: Audio Upload (FIXED - No experimental features)
    with tab2:
        if language == 'hi':
            st.subheader("üé§ ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç")
        else:
            st.subheader("üé§ Upload Audio File")
        
        st.markdown('<div class="audio-container">', unsafe_allow_html=True)
        
        # File upload option
        audio_file = st.file_uploader(
            "Choose an audio file" if language == 'en' else "‡§ë‡§°‡§ø‡§Ø‡•ã ‡§´‡§º‡§æ‡§á‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç",
            type=settings.supported_audio_formats,
            help="Upload WAV, MP3, OGG, or M4A files" if language == 'en' else "WAV, MP3, OGG, ‡§Ø‡§æ M4A ‡§´‡§º‡§æ‡§á‡§≤‡•á‡§Ç ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç"
        )
        
        if audio_file:
            st.audio(audio_file, format='audio/wav')
            
            # Save uploaded file
            with tempfile.NamedTemporaryFile(delete=False, suffix=f'.{audio_file.type.split("/")[1]}') as tmp_file:
                tmp_file.write(audio_file.read())
                audio_file_path = tmp_file.name
            
            if language == 'hi':
                st.success("‚úÖ ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§π‡•Å‡§à!")
            else:
                st.success("‚úÖ Audio file uploaded!")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Recording instructions
        st.markdown('<div class="instruction-box">', unsafe_allow_html=True)
        
        if language == 'hi':
            st.markdown("""
            ### üéôÔ∏è ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§ï‡•à‡§∏‡•á ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡§∞‡•á‡§Ç:
            
            **‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ 1: ‡§Ö‡§™‡§®‡•á ‡§´‡•ã‡§® ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç**
            1. ‡§Ö‡§™‡§®‡•á ‡§´‡•ã‡§® ‡§™‡§∞ ‡§µ‡•â‡§Ø‡§∏ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§∞ ‡§ê‡§™ ‡§ñ‡•ã‡§≤‡•á‡§Ç
            2. 30-60 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§§‡§ï ‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§µ‡§®‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç
            3. ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ä‡§™‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
            
            **‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ 2: ‡§ï‡§Ç‡§™‡•ç‡§Ø‡•Ç‡§ü‡§∞ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç**
            1. Windows Voice Recorder ‡§Ø‡§æ Audacity ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
            2. 30-60 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§§‡§ï ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¨‡•ã‡§≤‡•á‡§Ç
            3. WAV ‡§Ø‡§æ MP3 ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
            """)
        else:
            st.markdown("""
            ### üéôÔ∏è How to Record Audio:
            
            **Option 1: Use your phone**
            1. Open voice recorder app on your phone
            2. Record 30-60 seconds describing your feelings
            3. Save the file and upload it above
            
            **Option 2: Use your computer**
            1. Use Windows Voice Recorder or Audacity
            2. Record yourself speaking clearly for 30-60 seconds
            3. Save as WAV or MP3 and upload above
            
            **Option 3: Online tools**
            1. Search "online voice recorder" in your browser
            2. Record and download the audio file
            3. Upload the file above
            """)
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Tips for better audio
        if language == 'hi':
            st.info("üí° **‡§∏‡•Å‡§ù‡§æ‡§µ**: ‡§∂‡§æ‡§Ç‡§§ ‡§ú‡§ó‡§π ‡§Æ‡•á‡§Ç ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§Æ‡§æ‡§á‡§ï ‡§ï‡•á ‡§ï‡§∞‡•Ä‡§¨ ‡§î‡§∞ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¨‡•ã‡§≤‡•á‡§Ç‡•§ ‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§µ‡§®‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ñ‡•Å‡§≤‡§ï‡§∞ ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§")
        else:
            st.info("üí° **Tips**: Record in a quiet environment. Speak clearly and close to the microphone. Express your feelings openly for better analysis.")
    
    # Tab 3: Photo/Video Capture
    with tab3:
        if language == 'hi':
            st.subheader("üìπ ‡§´‡•ã‡§ü‡•ã ‡§ï‡•à‡§™‡•ç‡§ö‡§∞ ‡§Ø‡§æ ‡§Ö‡§™‡§≤‡•ã‡§°")
        else:
            st.subheader("üìπ Photo Capture or Upload")
        
        st.markdown('<div class="upload-section">', unsafe_allow_html=True)
        
        # Method selection
        photo_method = st.radio(
            "Choose photo input method:" if language == 'en' else "‡§´‡•ã‡§ü‡•ã ‡§á‡§®‡§™‡•Å‡§ü ‡§µ‡§ø‡§ß‡§ø ‡§ö‡•Å‡§®‡•á‡§Ç:",
            ["üì∏ Take Photo with Camera", "üìÅ Upload Image File"] if language == 'en' else ["üì∏ ‡§ï‡•à‡§Æ‡§∞‡•á ‡§∏‡•á ‡§´‡•ã‡§ü‡•ã ‡§≤‡•á‡§Ç", "üìÅ ‡§á‡§Æ‡•á‡§ú ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç"]
        )
        
        if "üì∏" in photo_method:
            # Built-in camera
            photo = st.camera_input(
                "Take a photo of yourself" if language == 'en' else "‡§Ö‡§™‡§®‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§≤‡•á‡§Ç",
                help="Make sure your face is clearly visible and well-lit" if language == 'en' else "‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡§æ ‡§ö‡•á‡§π‡§∞‡§æ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¶‡§ø‡§ñ‡§æ‡§à ‡§¶‡•á ‡§∞‡§π‡§æ ‡§π‡•à"
            )
            
            if photo:
                image = Image.open(photo)
                video_frame = np.array(image)
                
                if language == 'hi':
                    st.success("‚úÖ ‡§´‡•ã‡§ü‡•ã ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≤‡•Ä ‡§ó‡§à!")
                else:
                    st.success("‚úÖ Photo captured successfully!")
        
        else:
            # File upload
            uploaded_image = st.file_uploader(
                "Upload a clear photo of yourself" if language == 'en' else "‡§Ö‡§™‡§®‡•Ä ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§´‡•ã‡§ü‡•ã ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
                type=settings.supported_image_formats,
                help="Upload JPG, PNG, or other image formats" if language == 'en' else "JPG, PNG ‡§Ø‡§æ ‡§Ö‡§®‡•ç‡§Ø ‡§á‡§Æ‡•á‡§ú ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç"
            )
            
            if uploaded_image:
                image = Image.open(uploaded_image)
                video_frame = np.array(image)
                st.image(image, caption="Uploaded Image" if language == 'en' else "‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡•Ä ‡§ó‡§à ‡§á‡§Æ‡•á‡§ú", width=300)
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Tips for better photos
        if language == 'hi':
            st.info("üí° **‡§∏‡•Å‡§ù‡§æ‡§µ**: ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§∞‡•ã‡§∂‡§®‡•Ä ‡§Æ‡•á‡§Ç ‡§´‡•ã‡§ü‡•ã ‡§≤‡•á‡§Ç‡•§ ‡§ï‡•à‡§Æ‡§∞‡§æ ‡§Ü‡§™‡§ï‡•á ‡§ö‡•á‡§π‡§∞‡•á ‡§ï‡•á ‡§∏‡§æ‡§Æ‡§®‡•á ‡§π‡•ã‡•§ ‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§≠‡§æ‡§µ ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç‡•§")
        else:
            st.info("üí° **Tips**: Take photo in good lighting. Face the camera directly. Keep a natural expression.")
    
    # Analysis button
    st.divider()
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        button_text = "üîç Analyze My Mental State" if language == 'en' else "üîç ‡§Æ‡•á‡§∞‡•Ä ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç"
        
        analyze_button = st.button(
            button_text,
            type="primary",
            use_container_width=True,
            help="Process all provided inputs and generate mental health insights" if language == 'en' else "‡§∏‡§≠‡•Ä ‡§á‡§®‡§™‡•Å‡§ü ‡§ï‡•ã ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç"
        )
    
    # Perform analysis
    if analyze_button:
        if not any([text_input, audio_file_path, video_frame is not None]):
            warning_text = "‚ö†Ô∏è Please provide at least one input (text, audio, or photo) for analysis." if language == 'en' else "‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ ‡§è‡§ï ‡§á‡§®‡§™‡•Å‡§ü (‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü, ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§Ø‡§æ ‡§´‡•ã‡§ü‡•ã) ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§"
            st.warning(warning_text)
            return
        
        spinner_text = "üß† Analyzing your mental state... Please wait." if language == 'en' else "üß† ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à... ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§"
        
        with st.spinner(spinner_text):
            try:
                # Progress tracking
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                status_text.text("Processing inputs..." if language == 'en' else "‡§á‡§®‡§™‡•Å‡§ü ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§π‡•ã ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...")
                progress_bar.progress(25)
                
                # Perform comprehensive analysis
                results = st.session_state.diagnosis_engine.comprehensive_analysis(
                    text=text_input if text_input and len(text_input.strip()) > 0 else None,
                    audio_file=audio_file_path,
                    video_frame=video_frame
                )
                
                progress_bar.progress(75)
                status_text.text("Generating insights..." if language == 'en' else "‡§∏‡•Å‡§ù‡§æ‡§µ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§ø‡§è ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...")
                
                # Store results
                st.session_state.analysis_results = results
                st.session_state.current_mood = results['current_mood']['current_mood']
                
                # Add to conversation history
                st.session_state.conversation_manager.add_analysis_result(results)
                
                progress_bar.progress(100)
                status_text.text("Analysis complete! ‚úÖ" if language == 'en' else "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡•Ç‡§∞‡§æ! ‚úÖ")
                
                # Clean up temporary files
                if audio_file_path and os.path.exists(audio_file_path):
                    os.unlink(audio_file_path)
                
                time.sleep(1)
                progress_bar.empty()
                status_text.empty()
                
                success_text = "‚úÖ Analysis completed successfully!" if language == 'en' else "‚úÖ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü!"
                st.success(success_text)
                
            except Exception as e:
                error_text = f"‚ùå Analysis failed: {str(e)}" if language == 'en' else f"‚ùå ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§Ö‡§∏‡§´‡§≤: {str(e)}"
                st.error(error_text)
                logger.error(f"Analysis error: {str(e)}")
                return

def display_analysis_results():
    """Enhanced results display with primary concern focus"""
    if not st.session_state.analysis_results:
        return
    
    results = st.session_state.analysis_results
    language = st.session_state.get('selected_language', 'en')
    
    if not results.get('analysis_successful', False):
        error_text = "‚ùå Analysis was not successful. Please try again." if language == 'en' else "‚ùå ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§∏‡§´‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§Ü‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§"
        st.error(error_text)
        return
    
    header_text = "üìä Analysis Results" if language == 'en' else "üìä ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ"
    st.header(header_text)
    
    # Primary Concern Highlight (Enhanced Focus)
    summary = results['summary']
    primary_concern = summary['primary_concern']
    confidence = summary['confidence']
    
    if primary_concern != 'None detected' and confidence > 20:
        if language == 'hi':
            concern_text = f"üéØ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ö‡§ø‡§Ç‡§§‡§æ ‡§ï‡§æ ‡§™‡§§‡§æ ‡§ö‡§≤‡§æ: {primary_concern.title()}"
            confidence_text = f"‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø‡§§‡§æ: {confidence}%"
            recommendation_text = "‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂: ‡§Ø‡§π ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ö‡§ø‡§Ç‡§§‡§æ ‡§ï‡§æ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§π‡•à‡•§ ‡§ï‡§ø‡§∏‡•Ä ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§∏‡•á ‡§á‡§∏ ‡§™‡§∞ ‡§ö‡§∞‡•ç‡§ö‡§æ ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§"
        else:
            concern_text = f"üéØ Primary Concern Detected: {primary_concern.title()}"
            confidence_text = f"Confidence: {confidence}%"
            recommendation_text = "Recommendation: This appears to be your main area of concern. Consider discussing this with a mental health professional."
        
        st.markdown(f"""
        <div class="primary-concern-highlight">
            <h3>{concern_text}</h3>
            <p><strong>{confidence_text}</strong></p>
            <p><strong>{recommendation_text}</strong></p>
        </div>
        """, unsafe_allow_html=True)
    
    # Enhanced Crisis Detection
    risk_level = summary['risk_level']
    if confidence > 60 and primary_concern in ['depression', 'anxiety', 'ptsd'] and risk_level in ['moderate', 'high']:
        crisis_text = """
        üö® ELEVATED RISK DETECTED - Please consider seeking support:
        ‚Ä¢ Talk to a trusted friend, family member, or counselor
        ‚Ä¢ National Suicide Prevention Lifeline: 988
        ‚Ä¢ Crisis Text Line: Text HOME to 741741
        ‚Ä¢ For emergencies: 911
        """ if language == 'en' else """
        üö® ‡§â‡§ö‡•ç‡§ö ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§ï‡§æ ‡§™‡§§‡§æ ‡§ö‡§≤‡§æ - ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§≤‡•á‡§®‡•á ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç:
        ‚Ä¢ ‡§ï‡§ø‡§∏‡•Ä ‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø ‡§Æ‡§ø‡§§‡•ç‡§∞, ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞‡§ú‡§® ‡§Ø‡§æ ‡§ï‡§æ‡§â‡§Ç‡§∏‡§≤‡§∞ ‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç
        ‚Ä¢ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ: 112 (‡§≠‡§æ‡§∞‡§§)
        ‚Ä¢ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ï‡§ø‡§∏‡•Ä ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç
        """
        
        st.markdown(f'<div class="crisis-alert">{crisis_text}</div>', unsafe_allow_html=True)
    
    # Current mood display (smaller emphasis)
    mood_data = results['current_mood']
    mood = mood_data['current_mood']
    mood_confidence = mood_data['confidence']
    
    mood_colors = {
        'Happy': '#4CAF50', 'Sad': '#2196F3', 'Angry': '#F44336',
        'Anxious': '#FF9800', 'Neutral': '#9E9E9E', 'Excited': '#E91E63',
        'Calm': '#00BCD4', 'Surprised': '#FFEB3B', 'Tired': '#795548'
    }
    
    mood_color = mood_colors.get(mood, '#9E9E9E')
    
    # Summary metrics with PRIMARY CONCERN EMPHASIS
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        # PRIMARY CONCERN gets the biggest emphasis
        concern_icon = "üî¥" if confidence > 60 else "üü°" if confidence > 30 else "üü¢"
        label = "üéØ PRIMARY CONCERN" if language == 'en' else "üéØ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ö‡§ø‡§Ç‡§§‡§æ"
        
        st.metric(
            label,
            f"{concern_icon} {primary_concern}",
            delta=f"Confidence: {confidence}%",
            help="Most likely mental health area needing attention" if language == 'en' else "‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞"
        )
    
    with col2:
        # Risk level
        risk_colors = {'minimal': 'üü¢', 'low': 'üü°', 'moderate': 'üü†', 'high': 'üî¥'}
        risk_icon = risk_colors.get(risk_level, '‚ö™')
        
        label = "Risk Level" if language == 'en' else "‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§∏‡•ç‡§§‡§∞"
        st.metric(
            label,
            f"{risk_icon} {risk_level.title()}",
            help="Overall risk assessment" if language == 'en' else "‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®"
        )
    
    with col3:
        # Current mood (less emphasis)
        label = "Current Mood" if language == 'en' else "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•Ç‡§°"
        st.metric(
            label,
            f"üòä {mood}",
            delta=f"{mood_confidence:.1%}",
            help="Current emotional state" if language == 'en' else "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§≠‡§æ‡§µ‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§∏‡•ç‡§•‡§ø‡§§‡§ø"
        )
    
    with col4:
        # Professional help needed
        needs_attention = summary['needs_attention']
        attention_text = "‚ö†Ô∏è Recommended" if needs_attention else "‚úÖ Optional"
        if language == 'hi':
            attention_text = "‚ö†Ô∏è ‡§∏‡•Å‡§ù‡§æ‡§à ‡§ó‡§à" if needs_attention else "‚úÖ ‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï"
        
        label = "Professional Help" if language == 'en' else "‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ"
        st.metric(
            label,
            attention_text,
            help="Whether professional consultation is recommended" if language == 'en' else "‡§ï‡•ç‡§Ø‡§æ ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§∏‡§≤‡§æ‡§π ‡§∏‡•Å‡§ù‡§æ‡§à ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à"
        )
    
    # Detailed diagnosis with PRIMARY CONCERN FOCUS
    diagnosis = results['diagnosis']
    
    if diagnosis['top_conditions']:
        header = "üè• Detailed Assessment - Primary Concerns First" if language == 'en' else "üè• ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® - ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ö‡§ø‡§Ç‡§§‡§æ‡§è‡§Ç ‡§™‡§π‡§≤‡•á"
        st.subheader(header)
        
        sorted_conditions = sorted(diagnosis['top_conditions'], key=lambda x: x['confidence_percentage'], reverse=True)
        
        for i, condition in enumerate(sorted_conditions):
            is_primary = (i == 0 and condition['confidence_percentage'] > 20)
            
            # Enhanced labeling for primary concern
            if is_primary:
                prefix = "üéØ PRIMARY CONCERN: " if language == 'en' else "üéØ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ö‡§ø‡§Ç‡§§‡§æ: "
                expansion = True
            else:
                prefix = f"#{i+1}: "
                expansion = False
            
            with st.expander(
                f"{prefix}{condition['condition'].title()} - {condition['confidence_percentage']}%",
                expanded=expansion
            ):
                severity_label = "Severity:" if language == 'en' else "‡§ó‡§Ç‡§≠‡•Ä‡§∞‡§§‡§æ:"
                description_label = "Description:" if language == 'en' else "‡§µ‡§ø‡§µ‡§∞‡§£:"
                confidence_label = "Assessment Confidence:" if language == 'en' else "‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø‡§§‡§æ:"
                
                st.write(f"**{severity_label}** {condition['severity'].title()}")
                st.write(f"**{description_label}** {condition['description']}")
                st.write(f"**{confidence_label}** {condition['confidence_percentage']}%")
                
                # Enhanced progress bar for primary concern
                if is_primary:
                    st.markdown(f"""
                    <div style="background: linear-gradient(90deg, #dc3545 0%, #fd7e14 100%); 
                                height: 25px; width: {condition['confidence_percentage']}%; 
                                border-radius: 12px; display: flex; align-items: center; 
                                justify-content: center; color: white; font-weight: bold; margin: 10px 0;">
                        PRIMARY: {condition['confidence_percentage']}%
                    </div>
                    """, unsafe_allow_html=True)
                    
                    primary_info = "üí° This is your PRIMARY mental health concern based on comprehensive analysis." if language == 'en' else "üí° ‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§Ø‡§π ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ö‡§ø‡§Ç‡§§‡§æ ‡§π‡•à‡•§"
                    st.info(primary_info)
                else:
                    # Standard progress bar for secondary concerns
                    st.progress(condition['confidence_percentage'] / 100)
    
    # Enhanced AI Analysis
    if diagnosis.get('ai_analysis'):
        header = "ü§ñ AI Therapist Professional Assessment" if language == 'en' else "ü§ñ AI ‡§•‡•á‡§∞‡•á‡§™‡§ø‡§∏‡•ç‡§ü ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®"
        st.subheader(header)
        st.markdown(f"""
        <div class="analysis-card">
            {diagnosis['ai_analysis']}
        </div>
        """, unsafe_allow_html=True)
    
    # Enhanced Recommendations (Primary-concern focused)
    if diagnosis.get('recommendations'):
        header = "üí° Personalized Action Plan" if language == 'en' else "üí° ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§Ø‡•ã‡§ú‡§®‡§æ"
        st.subheader(header)
        
        # Separate recommendations by priority
        primary_recs = []
        general_recs = []
        
        for rec in diagnosis['recommendations']:
            if any(keyword in rec.lower() for keyword in [primary_concern.lower(), 'professional', 'immediate']):
                primary_recs.append(rec)
            else:
                general_recs.append(rec)
        
        if primary_recs:
            priority_header = f"**üéØ Priority Actions for {primary_concern.title()}:**" if language == 'en' else f"**üéØ {primary_concern.title()} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø:**"
            st.markdown(priority_header)
            for i, rec in enumerate(primary_recs, 1):
                st.markdown(f"**{i}.** {rec}")
            
            st.divider()
        
        if general_recs:
            general_header = "**üìã Additional Wellness Recommendations:**" if language == 'en' else "**üìã ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ï‡§≤‡•ç‡§Ø‡§æ‡§£ ‡§∏‡•Å‡§ù‡§æ‡§µ:**"
            st.markdown(general_header)
            for i, rec in enumerate(general_recs, len(primary_recs) + 1):
                st.markdown(f"{i}. {rec}")
    
    # Language detection info
    text_analysis = results.get('individual_analyses', {}).get('text_analysis', {})
    detected_language = text_analysis.get('language', 'unknown')
    
    if detected_language == 'hi':
        st.info("üáÆüá≥ **‡§π‡§ø‡§®‡•ç‡§¶‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ï‡§æ ‡§™‡§§‡§æ ‡§ö‡§≤‡§æ**: ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ï‡•á ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§î‡§∞ ‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§")
    elif detected_language == 'en' and language == 'hi':
        st.info("üá∫üá∏ **‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ï‡§æ ‡§™‡§§‡§æ ‡§ö‡§≤‡§æ**: ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ï‡•á ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§")

def display_chat_interface():
    """Enhanced chat interface with native Streamlit chat components (FIXED)"""
    language = st.session_state.get('selected_language', 'en')
    
    header = "üí¨ AI Therapist - Personalized Support" if language == 'en' else "üí¨ AI ‡§•‡•á‡§∞‡•á‡§™‡§ø‡§∏‡•ç‡§ü - ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ"
    st.header(header)
    
    # Get primary concern for context
    primary_concern = "general support"
    if st.session_state.analysis_results:
        primary_concern = st.session_state.analysis_results.get('summary', {}).get('primary_concern', 'general support')
    
    # Enhanced conversation starter
    messages = st.session_state.conversation_manager.get_current_messages()
    
    if not messages and st.session_state.analysis_results:
        if primary_concern != 'None detected':
            if language == 'hi':
                initial_message = f"‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç‡§®‡•á ‡§¶‡•á‡§ñ‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•á ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§Æ‡•á‡§Ç {primary_concern.lower()} ‡§∏‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§∏‡§Ç‡§ï‡•á‡§§ ‡§π‡•à‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§∏‡•Å‡§®‡§®‡•á ‡§î‡§∞ ‡§á‡§∏ ‡§µ‡§ø‡§∑‡§Ø ‡§™‡§∞ ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§§‡•á ‡§π‡•Å‡§è ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Æ‡§∞‡•ç‡§•‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§™ ‡§á‡§∏ ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•à‡§∏‡§æ ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç?"
            else:
                initial_message = f"Hello! I noticed from your analysis that there are indicators related to {primary_concern.lower()}. I'm here to listen and provide targeted support for this area. How are you feeling about this right now?"
        else:
            try:
                initial_message = st.session_state.openai_client.generate_initial_conversation_starter(
                    st.session_state.analysis_results
                )
            except:
                initial_message = "Hello! I'm here to listen and support you. How are you feeling today?" if language == 'en' else "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§∏‡•Å‡§®‡§®‡•á ‡§î‡§∞ ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Æ‡§∞‡•ç‡§•‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§ú ‡§Ü‡§™ ‡§ï‡•à‡§∏‡§æ ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç?"
        
        st.session_state.conversation_manager.add_message("assistant", initial_message)
        messages = st.session_state.conversation_manager.get_current_messages()
    
    # Context indicator
    if primary_concern != 'general support' and primary_concern != 'None detected':
        context_text = f"üéØ **Focus Area**: {primary_concern.title()}" if language == 'en' else f"üéØ **‡§´‡•ã‡§ï‡§∏ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞**: {primary_concern.title()}"
        st.info(context_text)
    
    # FIXED: Chat display with native Streamlit chat components
    chat_container = st.container()
    
    with chat_container:
        for message in messages:
            role = message['role']
            content = message['content']
            timestamp = message.get('timestamp', datetime.now())
            
            # Use Streamlit's native chat message display
            with st.chat_message(role, avatar="ü§ñ" if role == "assistant" else "üë§"):
                st.caption(f"**{timestamp.strftime('%H:%M')}**")
                st.markdown(content)
    
    # Crisis support notice
    if language == 'hi':
        crisis_text = "üÜò **‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ**: ‡§Ø‡§¶‡§ø ‡§Ü‡§™ ‡§Ü‡§§‡•ç‡§Æ-‡§π‡§æ‡§®‡§ø ‡§ï‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§ó‡•Å‡§ú‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã ‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡•Å‡§∞‡§Ç‡§§ 112 (‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤) ‡§™‡§∞ ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§"
    else:
        crisis_text = "üÜò **Crisis Support**: If you're having thoughts of self-harm, please call 112 or 911 immediately."
    
    st.info(crisis_text)
    
    # Enhanced chat input with context
    input_placeholder = "Share your thoughts about this..." if language == 'en' else "‡§á‡§∏ ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§®‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç..."
    if primary_concern != 'general support' and primary_concern != 'None detected':
        input_placeholder = f"How are you feeling about {primary_concern.lower()}?" if language == 'en' else f"{primary_concern.lower()} ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Ü‡§™ ‡§ï‡•à‡§∏‡§æ ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç?"
    
    user_input = st.chat_input(input_placeholder, key="chat_input")
    
    if user_input:
        # Add user message
        st.session_state.conversation_manager.add_message("user", user_input)
        
        # Enhanced crisis detection
        is_crisis = st.session_state.openai_client.detect_crisis_keywords(user_input)
        
        # Generate contextual response
        spinner_text = "AI Therapist is preparing a personalized response..." if language == 'en' else "AI ‡§•‡•á‡§∞‡•á‡§™‡§ø‡§∏‡•ç‡§ü ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à..."
        
        with st.spinner(spinner_text):
            try:
                context = st.session_state.conversation_manager.get_conversation_context()
                
                if is_crisis:
                    ai_response = st.session_state.openai_client.generate_crisis_response(user_input)
                else:
                    ai_response = st.session_state.openai_client.generate_therapist_response(
                        user_input,
                        context,
                        st.session_state.analysis_results,
                        st.session_state.current_mood,
                        language=language
                    )
                
                st.session_state.conversation_manager.add_message("assistant", ai_response)
                
            except Exception as e:
                if language == 'hi':
                    error_msg = "‡§Æ‡•Å‡§ù‡•á ‡§ñ‡•á‡§¶ ‡§π‡•à, ‡§Æ‡•Å‡§ù‡•á ‡§Ö‡§≠‡•Ä ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§™‡§∞‡•á‡§∂‡§æ‡§®‡•Ä ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§"
                else:
                    error_msg = "I'm sorry, I'm having trouble responding right now. Please try again."
                
                st.session_state.conversation_manager.add_message("assistant", error_msg)
                logger.error(f"Chat response error: {str(e)}")
        
        st.rerun()

def main():
    """Main application with enhanced focus on primary concerns"""
    # Header
    language = st.session_state.get('selected_language', 'en')
    
    if language == 'hi':
        header_text = "üß† ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§ï"
        subtitle_text = "AI-‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® - ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ö‡§ø‡§Ç‡§§‡§æ‡§ì‡§Ç ‡§™‡§∞ ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§§"
    else:
        header_text = "üß† Mental Health Analyzer"
        subtitle_text = "AI-powered mental health assessment - Focused on Primary Concerns"
    
    st.markdown(f"""
    <div class="main-header">
        <h1>{header_text}</h1>
        <p style="margin: 0;">{subtitle_text}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Initialize app
    if not initialize_app():
        return
    
    # Display sidebar
    display_sidebar()
    
    # Main content with enhanced layout
    col1, col2 = st.columns([1.3, 0.7])  # Adjusted ratio for better primary concern display
    
    with col1:
        # Analysis section
        display_analysis_section()
        
        # Results section with PRIMARY CONCERN EMPHASIS
        if st.session_state.analysis_results:
            st.divider()
            display_analysis_results()
    
    with col2:
        # Chat interface with primary concern context
        display_chat_interface()
    
    # Enhanced footer
    st.markdown("---")
    
    if language == 'hi':
        disclaimer_text = """
        **‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£**: ‡§Ø‡§π ‡§â‡§™‡§ï‡§∞‡§£ ‡§ï‡•á‡§µ‡§≤ ‡§∏‡•Ç‡§ö‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à‡•§ ‡§Ø‡§π ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§≤‡§æ‡§π, ‡§®‡§ø‡§¶‡§æ‡§® ‡§Ø‡§æ ‡§â‡§™‡§ö‡§æ‡§∞ ‡§ï‡§æ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ 
        ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§Ç‡§ï‡§ü ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§≤‡•á‡§Ç‡•§
        """
    else:
        disclaimer_text = """
        **Important Disclaimer**: This tool is for informational purposes only and is not a substitute for professional medical advice, diagnosis, or treatment. 
        For mental health emergencies, please seek immediate professional help.
        """
    
    st.markdown(disclaimer_text)
    
    # Debug info (only in development)
    if st.checkbox("üîß Show Debug Info", value=False):
        st.subheader("Debug Information")
        st.write("**Session State Keys:**", list(st.session_state.keys()))
        st.write("**Selected Language:**", st.session_state.get('selected_language', 'en'))
        
        if st.session_state.analysis_results:
            with st.expander("Analysis Results JSON", expanded=False):
                st.json(st.session_state.analysis_results)

if __name__ == "__main__":
    main()
